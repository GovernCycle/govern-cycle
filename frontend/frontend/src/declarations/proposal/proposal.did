type Vote = 
 record {
   approved: bool;
   user: principal;
 };
type TypeProposal = 
 variant {
   Project;
   Standard;
 };
type Text = text;
type SuccessProposal = 
 variant {
   FullProposal: vec record {
                       nat;
                       Proposal;
                     };
   ParticipationsSet;
   Proposal: Proposal;
   SuccessText: Text;
 };
type StateProposal = 
 variant {
   Approved;
   Pending;
   Rejected;
 };
type Role = 
 variant {
   Academy;
   Community;
   Government;
   ProjectDeveloper;
   Register;
   Standard;
   TechnicalExpert;
   TechnicalSecretariat;
   Validator;
 };
type ProposalResult = 
 variant {
   err: ProposalError;
   ok: SuccessProposal;
 };
type ProposalRequest = 
 record {
   deadline: text;
   description: opt text;
   environmentalUnits: nat;
   invitedRoles: vec Role;
   links: vec text;
   location: vec Jurisdiction;
   name: text;
   photo: blob;
   threshold: nat;
 };
type ProposalFullError = 
 variant {
   InvalidDate;
   NotAllowedAction;
   ParticipationsNotSet;
   ProposalNotFound;
 };
type ProposalError = 
 variant {
   InvalidDate;
   NoUsersFound;
   NotAllowedAction;
   ParticipationsNotSet;
   ProposalAlreadyApproved;
   ProposalNotFound;
   UserAlreadyVoted;
   UserNotApproved;
   UserNotAuthenticated;
   UserNotAuthorized;
   UserNotFound;
   UserNotInvited;
 };
type Proposal = 
 record {
   author: principal;
   comments: vec Comment;
   deadline: text;
   description: opt text;
   environmentalUnits: nat;
   invitedRoles: vec Role;
   invitedUsers: vec principal;
   links: vec text;
   location: vec Jurisdiction;
   name: text;
   photo: blob;
   startDate: text;
   state: StateProposal;
   threshold: nat;
   typeProposal: TypeProposal;
   votes: vec Vote;
 };
type Jurisdiction = 
 record {
   continent: opt text;
   country: opt text;
   region: opt text;
 };
type GetProposalsResult = 
 variant {
   err: ProposalFullError;
   ok: SuccessProposal;
 };
type Comment = 
 record {
   detail: text;
   tema: text;
   user: principal;
 };
service : {
  addComment: (nat, text, text) -> (ProposalResult);
  createProposal: (ProposalRequest) -> (ProposalResult);
  deleteProposal: (nat) -> (ProposalResult);
  getAllProposals: () -> (GetProposalsResult);
  getProposal: (nat) -> (GetProposalsResult);
  proveExposeEndpointTime: () -> (text);
  vote: (bool, nat) -> (ProposalResult);
}
