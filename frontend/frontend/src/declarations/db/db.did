type Vote = 
 record {
   approved: bool;
   user: principal;
 };
type User = 
 record {
   email: text;
   jurisdiction: vec Jurisdiction;
   logo: blob;
   manager: opt text;
   name: text;
   phone: text;
   role: vec Role;
   state: State;
 };
type TypeProposal = 
 variant {
   Project;
   Standard;
 };
type Text = text;
type SuccessProposal = 
 variant {
   FullProposal: vec record {
                       nat;
                       Proposal;
                     };
   ParticipationsSet;
   Proposal: Proposal;
   SuccessText: Text;
 };
type SuccessAuthentication = 
 variant {
   Participation: Participation;
   SuccessText: Text;
   User: User;
   WhiteListed: vec principal;
 };
type StateProposal = 
 variant {
   Approved;
   Pending;
   Rejected;
 };
type State = 
 variant {
   Approved;
   Pending;
   Rejected;
 };
type Role = 
 variant {
   Academy;
   Community;
   Government;
   ProjectDeveloper;
   Register;
   Standard;
   TechnicalExpert;
   TechnicalSecretariat;
   Validator;
 };
type ProposalResult = 
 variant {
   err: ProposalError;
   ok: SuccessProposal;
 };
type ProposalError = 
 variant {
   InvalidDate;
   NoUsersFound;
   NotAllowedAction;
   ParticipationsNotSet;
   ProposalAlreadyApproved;
   ProposalNotFound;
   UserAlreadyVoted;
   UserNotApproved;
   UserNotAuthenticated;
   UserNotAuthorized;
   UserNotFound;
   UserNotInvited;
 };
type Proposal = 
 record {
   author: principal;
   comments: vec Comment;
   deadline: text;
   description: opt text;
   environmentalUnits: nat;
   invitedRoles: vec Role;
   invitedUsers: vec principal;
   links: vec text;
   location: vec Jurisdiction;
   name: text;
   photo: blob;
   startDate: text;
   state: StateProposal;
   threshold: nat;
   typeProposal: TypeProposal;
   votes: vec Vote;
 };
type Participation = 
 record {
   active: vec nat;
   done: vec nat;
   inactive: vec nat;
 };
type Jurisdiction = 
 record {
   continent: opt text;
   country: opt text;
   region: opt text;
 };
type Comment = 
 record {
   detail: text;
   tema: text;
   user: principal;
 };
type AuthenticationResult = 
 variant {
   err: AuthenticationError;
   ok: SuccessAuthentication;
 };
type AuthenticationError = 
 variant {
   NotAllowedAction;
   UserAlreadyExists;
   UserNotApproved;
   UserNotAuthenticated;
   UserNotAuthorized;
   UserNotFound;
 };
service : {
  addWhitelist: (principal) -> (AuthenticationResult);
  deleteProfile: (principal) -> (AuthenticationResult);
  deleteProposal: (nat) -> (ProposalResult);
  findWithRolesAndJurisdiction: (vec Role, vec Jurisdiction) ->
   (vec principal);
  getAllProfiles: () -> (vec record {
                               principal;
                               User;
                             });
  getAllProposals: () -> (vec record {
                                nat;
                                Proposal;
                              });
  getAllWhitelist: () -> (AuthenticationResult);
  getNextProposalId: () -> (nat);
  getParticipations: (principal) -> (opt Participation);
  getProfile: (principal) -> (opt User);
  getProposal: (nat) -> (opt Proposal);
  getProposalKeys: () -> (vec nat);
  isWhitelisted: (principal) -> (bool);
  saveProfile: (User, principal) -> (AuthenticationResult);
  saveProposal: (Proposal) -> (ProposalResult);
  setParticipation: (principal, Participation) -> ();
  updateProfile: (principal, User) -> (AuthenticationResult);
  updateProposal: (nat, Proposal) -> ();
}
