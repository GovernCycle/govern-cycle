type UserRequest = 
 record {
   email: text;
   jurisdiction: vec Jurisdiction;
   logo: blob;
   manager: opt text;
   name: text;
   phone: text;
   role: vec Role;
 };
type User = 
 record {
   email: text;
   jurisdiction: vec Jurisdiction;
   logo: blob;
   manager: opt text;
   name: text;
   phone: text;
   role: vec Role;
   state: State;
 };
type Text = text;
type SuccessAuthentication = 
 variant {
   Participation: Participation;
   SuccessText: Text;
   User: User;
   WhiteListed: vec principal;
 };
type State = 
 variant {
   Approved;
   Pending;
   Rejected;
 };
type Role = 
 variant {
   Academy;
   Community;
   Government;
   ProjectDeveloper;
   Register;
   Standard;
   TechnicalExpert;
   TechnicalSecretariat;
   Validator;
 };
type Participation = 
 record {
   active: vec nat;
   done: vec nat;
   inactive: vec nat;
 };
type Jurisdiction = 
 record {
   continent: opt text;
   country: opt text;
   region: opt text;
 };
type AuthenticationResult = 
 variant {
   err: AuthenticationError;
   ok: SuccessAuthentication;
 };
type AuthenticationError = 
 variant {
   NotAllowedAction;
   UserAlreadyExists;
   UserNotApproved;
   UserNotAuthenticated;
   UserNotAuthorized;
   UserNotFound;
 };
service : {
  /// Changes the state of a user profile.
  /// 
  /// This function allows an admin to change the state of a user's profile (e.g., active, inactive).
  /// It checks if the caller is an admin and if their profile is approved.
  /// 
  /// Parameters:
  /// - `state`: The new state to assign to the user.
  /// - `user`: The Principal identifier of the user whose state is being changed.
  /// 
  /// Returns:
  /// - `#err(#UserNotAuthenticated)` if the caller is anonymous.
  /// - `#err(#UserNotFound)` if the user's profile is not found.
  /// - `#err(#UserNotAuthorized)` if the caller is not an admin.
  /// - `#ok(#SuccessText("User state changed successfully"))` if the operation was successful.
  changeUserState: (State, principal) -> (AuthenticationResult);
  /// Creates a new user profile.
  /// 
  /// This function checks if the caller is authenticated and if the profile already exists.
  /// If the profile does not exist, it will create a new user profile, delete duplicate roles and jurisdictions, and save the new profile.
  /// 
  /// Parameters:
  /// - `user`: The user information to create the profile.
  /// 
  /// Returns:
  /// - `#err(#UserNotAuthenticated)` if the caller is anonymous.
  /// - `#err(#UserAlreadyExists)` if the user already has a profile.
  /// - `#ok(#SuccessText("User created successfully"))` if the profile was created successfully.
  createProfile: (UserRequest) -> (AuthenticationResult);
  /// Deletes a user profile.
  /// 
  /// This function allows an admin to delete a user's profile. It checks if the caller is an admin and if their profile is approved.
  /// 
  /// Parameters:
  /// - `user`: The Principal identifier of the user to delete.
  /// 
  /// Returns:
  /// - `#err(#UserNotAuthenticated)` if the caller is anonymous.
  /// - `#err(#UserNotFound)` if the user's profile is not found.
  /// - `#ok(#SuccessText("User deleted successfully"))` if the profile was deleted successfully.
  deleteProfile: (principal) -> (AuthenticationResult);
  /// Retrieves all profiles from the database.
  /// 
  /// Returns:
  /// - A list of tuples containing the Principal identifier and the user data.
  getAllProfiles: () -> (vec record {
                               principal;
                               User;
                             });
  /// Retrieves the participations of the caller.
  /// 
  /// This function checks if the caller is authenticated and retrieves their participations from the database.
  /// 
  /// Returns:
  /// - `#err(#UserNotAuthenticated)` if the caller is anonymous.
  /// - `#err(#UserNotFound)` if no participations are found.
  /// - `#ok(#Participation(participation))` if participations are found.
  getMyParticipations: () -> (AuthenticationResult);
  /// Retrieves the profile of the caller.
  /// 
  /// This function checks if the caller is authenticated and retrieves their profile from the database.
  /// 
  /// Returns:
  /// - `#err(#UserNotAuthenticated)` if the caller is anonymous.
  /// - `#err(#UserNotFound)` if the profile is not found.
  /// - `#ok(#User(userFound))` if the profile is found.
  getProfile: () -> (AuthenticationResult);
}
