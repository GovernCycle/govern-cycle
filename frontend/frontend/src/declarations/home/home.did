type UserRequest = 
 record {
   email: text;
   jurisdiction: vec Jurisdiction;
   logo: blob;
   manager: opt text;
   name: text;
   phone: text;
   role: vec Role;
 };
type User = 
 record {
   email: text;
   jurisdiction: vec Jurisdiction;
   logo: blob;
   manager: opt text;
   name: text;
   phone: text;
   role: vec Role;
   state: State;
 };
type Text = text;
type SuccessAuthentication = 
 variant {
   Participation: Participation;
   SuccessText: Text;
   User: User;
 };
type State = 
 variant {
   Approved;
   Pending;
   Rejected;
 };
type Role = 
 variant {
   Academy;
   Community;
   Government;
   ProjectDeveloper;
   Register;
   Standard;
   TechnicalExpert;
   TechnicalSecretariat;
   Validator;
 };
type Participation = 
 record {
   active: vec nat;
   done: vec nat;
   inactive: vec nat;
 };
type Jurisdiction = 
 record {
   continent: opt text;
   country: opt text;
   region: opt text;
 };
type AuthenticationResult = 
 variant {
   err: AuthenticationError;
   ok: SuccessAuthentication;
 };
type AuthenticationError = 
 variant {
   UserAlreadyExists;
   UserNotApproved;
   UserNotAuthenticated;
   UserNotAuthorized;
   UserNotFound;
 };
service : {
  changeUserState: (State, principal) -> (AuthenticationResult);
  createProfile: (UserRequest) -> (AuthenticationResult);
  deleteUser: (principal) -> (AuthenticationResult);
  getAllProfiles: () -> (vec record {
                               principal;
                               User;
                             });
  getMyParticipations: () -> (AuthenticationResult);
  getProfile: () -> (AuthenticationResult);
}
